<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:task="http://www.springframework.org/schema/task"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">
  <!-- 自动扫描 主要是扫描 service 等服务 -->
  <context:component-scan
    base-package="com.md1k.api.service,com.md1k.api.config"/>

  <!-- 引入配置文件 -->
  <bean id="propertyConfigurer"
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="classpath:jdbc.properties"/>
  </bean>

  <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <!-- 核心线程数 -->
    <property name="corePoolSize" value="${task.core_pool_size}"/>
    <!-- 最大线程数 -->
    <property name="maxPoolSize" value="${task.max_pool_size}"/>
    <!-- 队列最大长度 -->
    <property name="queueCapacity" value="${task.queue_capacity}"/>
    <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
    <property name="keepAliveSeconds" value="${task.keep_alive_seconds}"/>
  </bean>

  <!-- 注解式 -->
  <task:annotation-driven/>

  <!--定时任务配置 2018.4.5 w.b.l-->
  <!--<task:annotation-driven scheduler="cronTasks"/>-->
  <!--<task:scheduler id="cronTasks" pool-size="4"/>-->
  <!--<bean id="reloaderOfSysCFG" class="com.md1k.services.ude.proxy.ReloaderOfSysCFG"></bean>-->

  <!--<task:scheduled-tasks>-->
  <!--&lt;!&ndash; 这里表示的是每隔五秒执行一次 &ndash;&gt;-->
  <!--<task:scheduled ref="reloaderOfSysCFG" method="runingTask" cron="*/30 * * * * ?" />-->
  <!--&lt;!&ndash;<task:scheduled ref="reloaderOfSysCFG" method="print" cron="*/10 * * * * ?"/>&ndash;&gt;-->
  <!--</task:scheduled-tasks>-->

  <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
    <!--<property name="driverClassName" value="${jdbc.driver}"/>-->
    <!--<property name="url" value="${jdbc.url}"/>-->
    <!--<property name="username" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
    <!--<property name="initialSize" value="${dbcp.initialSize}"></property>-->
    <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
    <!--<property name="maxActive" value="${dbcp.maxActive}"></property>-->
    <!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
    <!--<property name="maxIdle" value="${dbcp.maxIdle}"></property>-->
    <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
    <!--<property name="minIdle" value="${dbcp.minIdle}"></property>-->
    <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
    <!--<property name="maxWait" value="${dbcp.maxWait}"></property>-->
  <!--</bean>-->

  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${druid.url}" />
    <property name="username" value="${druid.username}" />
    <property name="password" value="${druid.password}" />

    <property name="filters" value="stat" />

    <property name="maxActive" value="${druid.maxActive}" />
    <property name="initialSize" value="${druid.initialSize}" />
    <property name="maxWait" value="${druid.maxWait}" />
    <property name="minIdle" value="${druid.minIdle}" />

    <property name="timeBetweenEvictionRunsMillis" value="60000" />
    <property name="minEvictableIdleTimeMillis" value="300000" />

    <property name="testWhileIdle" value="true" />
    <property name="testOnBorrow" value="false" />
    <property name="testOnReturn" value="false" />

    <property name="poolPreparedStatements" value="true" />
    <property name="maxOpenPreparedStatements" value="20" />

    <property name="asyncInit" value="true" />
  </bean>

  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
    <property name="mapperLocations" value="classpath:dbmapper/*.xml"/>
    <!-- 配置分页插件 -->
    <property name="plugins">
      <array>
        <bean class="com.github.pagehelper.PageInterceptor">
          <!--集成分页插件 5.0.0 版本 原来的 dialect 变成了 helperDialect-->
          <property name="properties">
            <value>
              helperDialect=mysql
              reasonable=false
            </value>
          </property>
        </bean>
      </array>
    </property>
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.md1k.api.dao"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>

